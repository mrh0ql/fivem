#pragma once
#include <Includes/Includes.hpp>
#include <Includes/Utils.hpp>
#include <Core/Offsets.hpp>
#include <Core/Core.hpp>
#include <iostream>
#include <fstream>
#include <string>
#include <regex>
#include <mutex>

namespace Core
{
	namespace Features
	{
		namespace Exploits
		{

			enum eResourceState : uint32_t {
				Uninitialized,
				Stopped,
				Starting,
				Started,
				Stopping
			};

			struct Resources_t {
				uintptr_t Pointer = 0;
				std::string Path;
				eResourceState State = eResourceState::Uninitialized;
			};

			inline std::vector<Resources_t> vResources;

			class cResourceList {
			private:
			
			private:
				
			public:
				void Stop( uintptr_t ResourcePtr )
				{
					
				}

				void List( )
				{
				
				}
			};

			inline cResourceList g_ResourceList;

		}

	}
}
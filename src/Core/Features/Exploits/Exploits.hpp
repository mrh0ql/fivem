#pragma once
#include <Includes/Includes.hpp>
#include <Includes/Utils.hpp>
#include <Core/Offsets.hpp>
#include <Core/Core.hpp>
#include <iostream>
#include <fstream>
#include <string>
#include <regex>

namespace Core
{
	namespace Features
	{
		namespace Exploits
		{
			inline void NoClip( )
			{
				Core::SDK::Pointers::pLocalPlayer->FreezePed( true );

				D3DXVECTOR3 LocalPos = Core::SDK::Pointers::pLocalPlayer->GetPos( );
				if ( LocalPos == D3DXVECTOR3( 0,0,0 ) )
					return;

				uintptr_t PedNavigation = Core::SDK::Pointers::pLocalPlayer->GetNavigation( );
				if ( !PedNavigation )
					return;

				Mem.Write( PedNavigation + 0x30, D3DXVECTOR3( 0, 0, 0 ) );

				uintptr_t CamFollowPedCamera = Mem.Read<uintptr_t>( Core::SDK::Pointers::pCamGamePlayDirector + 0x2C0 );
				if ( !CamFollowPedCamera )
					return;

				D3DXVECTOR3 TPSAngles = Mem.Read<D3DXVECTOR3>( CamFollowPedCamera + 0x3D0 );

				if ( TPSAngles == D3DXVECTOR3( 0, 0, 0 ) )
				{
					TPSAngles = Mem.Read<D3DXVECTOR3>( CamFollowPedCamera + 0x40 );
				}
				else if ( TPSAngles != D3DXVECTOR3( 0, 0, 0 ) )
				{
					D3DXVECTOR3 NewPos = LocalPos;

					if ( GetAsyncKeyState( 0x57 ) & 0x8000 ) { //W
						NewPos.x += ( TPSAngles.x * g_Config.Player->NoClipSpeed );
						NewPos.y += ( TPSAngles.y * g_Config.Player->NoClipSpeed );
						NewPos.z += ( TPSAngles.z * g_Config.Player->NoClipSpeed );

					}

					if ( GetAsyncKeyState( 0x53 ) & 0x8000 ) { //S
						NewPos.x -= ( TPSAngles.x * g_Config.Player->NoClipSpeed );
						NewPos.y -= ( TPSAngles.y * g_Config.Player->NoClipSpeed );
						NewPos.z -= ( TPSAngles.z * g_Config.Player->NoClipSpeed );
					}


					if ( NewPos.x != 0 || NewPos.y != 0 || NewPos.z != 0 ) {
						Mem.Write( reinterpret_cast< uintptr_t >( Core::SDK::Pointers::pLocalPlayer ) + 0x90, NewPos );
						Mem.Write( PedNavigation + 0x50, NewPos );
					}
				}

			}

			inline void TpToWaypoint( ) {
				for ( int i = 0; i < 2000; i++ ) 
				{
					uintptr_t Blip = Mem.Read<uintptr_t>( g_Offsets.m_BlipList + ( 8U * i ) );
					if ( !Blip )continue;

					int BlipIcon = Mem.Read<int>( Blip + 0x40 );
					int BlipColor = Mem.Read<int>( Blip + 0x48 );

					if ( BlipIcon != 8 )continue;

					D3DXVECTOR2 BlipPos = Mem.Read<D3DXVECTOR2>( Blip + 0x10 );

					Core::SDK::Pointers::pLocalPlayer->SetPos( D3DXVECTOR3( BlipPos.x, BlipPos.y, -210.f ) );

				}
			}
		}
	}
}
